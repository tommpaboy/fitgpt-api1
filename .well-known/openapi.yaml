openapi: 3.1.0
info:
  title: FitGPT API
  version: "1.1.6"
  description: |
    API för Fitbit-data **plus** manuellt loggade måltider & pass.

    • **/daily-summary** – allt för ett datum i _ett_ anrop  
    • **/data**          – kort Fitbit-summering över X dagar  
    • **/data/extended** – detaljerad Fitbit-data  
    • **/log/meal**      – logga / hämta måltider  
    • **/log/workout**   – logga / hämta träningspass
servers:
  - url: https://fitgpt-2364.onrender.com

paths:

  ## ────────────── 1. ONE-STOP DAGSDATA ──────────────
  /daily-summary:
    get:
      summary: Samlad dagsdata (Fitbit + Firestore)
      operationId: getDailySummary
      parameters:
        - name: date
          in: query
          description: Datum (YYYY-MM-DD). Default = idag.
          required: false
          schema: { type: string, format: date }
      responses:
        "200":
          description: Fitbit-data, måltider & träningspass
          content: { application/json: { schema: { type: object } } }
      x-openai-isConsequential: false   # GPT gör högst 1 anrop

  ## ────────────── 2. FITBIT-SAMMANFATTNINGAR ──────────────
  /data:
    get:
      summary: Kort Fitbit-sammanfattning
      operationId: getCombinedData
      parameters:
        - name: days
          in: query
          description: Antal dagar (1-30), default 1
          schema: { type: integer, minimum: 1, maximum: 30, default: 1 }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object } } } }
      x-openai-isConsequential: false

  /data/extended:
    get:
      summary: Detaljerad Fitbit-data
      operationId: getExtendedData
      parameters:
        - name: days
          in: query
          description: Används om `target_date` saknas
          schema: { type: integer, minimum: 1, maximum: 30, default: 1 }
        - name: target_date               # måste matcha main.py
          in: query
          description: Datum (YYYY-MM-DD) – åsidosätter `days`
          schema: { type: string, format: date }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object } } } }
      x-openai-isConsequential: false

  ## ────────────── 3. SMALA FITBIT-ENDPOINTS (valfria) ──────────────
  /data/steps:
    get:
      summary: Stegdata för ett datum
      operationId: getSteps
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses: { "200": { description: OK, content: { application/json: { schema: { type: object } } } } }
      x-openai-isConsequential: false

  /data/sleep:
    get:
      summary: Sömndata för ett datum
      operationId: getSleep
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses: { "200": { description: OK, content: { application/json: { schema: { type: object } } } } }
      x-openai-isConsequential: false

  /data/heart:
    get:
      summary: Hjärtfrekvensdata för ett datum
      operationId: getHeart
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses: { "200": { description: OK, content: { application/json: { schema: { type: object } } } } }
      x-openai-isConsequential: false

  /data/calories:
    get:
      summary: Kaloridata för ett datum
      operationId: getCalories
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses: { "200": { description: OK, content: { application/json: { schema: { type: object } } } } }
      x-openai-isConsequential: false

  ## ────────────── 4. LOGGA & HÄMTA MÅLTIDER ──────────────
  /log/meal:
    post:
      summary: Logga måltid(er)
      operationId: logMeals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/MealLog"          # enstaka
                - type: array                                   # lista
                  items: { $ref: "#/components/schemas/MealLog" }
      responses:
        "200": { description: Sparat, content: { application/json: { schema: { type: object } } } }

    get:
      summary: Hämta måltider för ett datum
      operationId: getMeals
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/MealLog" } } } } }
      x-openai-isConsequential: false

  ## ────────────── 5. LOGGA & HÄMTA TRÄNINGSPASS ──────────────
  /log/workout:
    post:
      summary: Logga träningspass
      operationId: logWorkouts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/WorkoutLog"
                - type: array
                  items: { $ref: "#/components/schemas/WorkoutLog" }
      responses:
        "200": { description: Sparat, content: { application/json: { schema: { type: object } } } }

    get:
      summary: Hämta träningspass för ett datum
      operationId: getWorkouts
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/WorkoutLog" } } } } }
      x-openai-isConsequential: false

components:
  schemas:

    MealLog:
      type: object
      required: [date, meal, items]
      properties:
        date:   { type: string, format: date, description: Datum (YYYY-MM-DD) }
        meal:   { type: string, description: Typ av mål (Frukost, Lunch, …) }
        items:  { type: string, description: Livsmedel och mängder }
        estimated_calories:
          type: integer
          description: Uppskattat kcal (frivilligt, hellre högt)

    WorkoutLog:
      type: object
      required: [date, type, details]
      properties:
        date:   { type: string, format: date, description: Datum (YYYY-MM-DD) }
        type:   { type: string, description: Träningstyp (Styrka, Cardio, …) }
        details:{ type: string, description: T.ex. “Marklyft 100 kg × 3” }
