openapi: "3.1.0"

info:
  title: FitGPT API
  version: "1.1.8"
  description: >
    End-points för Fitbit-data + manuellt loggade måltider & träningspass.

servers:
  - url: https://fitgpt-2364.onrender.com

paths:

  /daily-summary:
    get:
      summary: Samlad dagsdata (Fitbit + Firestore)
      operationId: getDailySummary
      parameters:
        - name: date
          in: query
          required: false
          schema: { type: string, format: date }
      responses:
        "200":
          description: Dagsdata
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      x-openai-isConsequential: false

  /data:
    get:
      summary: Kort Fitbit-översikt
      operationId: getFitbitSummary
      parameters:
        - name: days
          in: query
          schema: { type: integer, default: 1, minimum: 1, maximum: 30 }
      responses:
        "200":
          description: Fitbit-summering
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      x-openai-isConsequential: false

  /data/extended:
    get:
      summary: Detaljerad Fitbit-data
      operationId: getFitbitExtended
      parameters:
        - name: days
          in: query
          schema: { type: integer, default: 1, minimum: 1, maximum: 30 }
        - name: target_date
          in: query
          schema: { type: string, format: date }
      responses:
        "200":
          description: Detaljerad Fitbit-payload
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      x-openai-isConsequential: false

  /log/meal:
    post:
      summary: Logga måltider
      operationId: postMeals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [entries]
              properties:
                entries:
                  type: array
                  items: { $ref: '#/components/schemas/MealLog' }
      responses:
        "200":
          description: Sparade måltider
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      x-openai-isConsequential: false

    get:
      summary: Hämta måltider för datum
      operationId: getMeals
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses:
        "200":
          description: Måltider
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/MealLog' }
      x-openai-isConsequential: false

  /log/workout:
    post:
      summary: Logga träningspass
      operationId: postWorkouts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [entries]
              properties:
                entries:
                  type: array
                  items: { $ref: '#/components/schemas/WorkoutLog' }
      responses:
        "200":
          description: Sparade pass
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      x-openai-isConsequential: false

    get:
      summary: Hämta pass för datum
      operationId: getWorkouts
      parameters:
        - name: date
          in: query
          required: true
          schema: { type: string, format: date }
      responses:
        "200":
          description: Pass
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/WorkoutLog' }
      x-openai-isConsequential: false

components:
  schemas:
    MealLog:
      type: object
      required: [date, meal, items]
      properties:
        date:   { type: string, format: date }
        meal:   { type: string }
        items:  { type: string }
        estimated_calories:
          type: integer
          nullable: true

    WorkoutLog:
      type: object
      required: [date, type, details]
      properties:
        date:   { type: string, format: date }
        type:   { type: string }
        details:{ type: string }
components:
  schemas:
    MealLog:
      type: object
      required:
        - date
        - meal
        - items
      properties:
        date:
          type: string
          format: date
          description: Datum (YYYY-MM-DD)
        meal:
          type: string
          description: Typ av mål (Frukost, Lunch …)
        items:
          type: string
          description: Livsmedel och mängder
        estimated_calories:
          type: integer
          nullable: true
          description: Uppskattat kaloriinnehåll

    WorkoutLog:
      type: object
      required:
        - date
        - workout_type
        - details
      properties:
        date:
          type: string
          format: date
        workout_type:           # tidigare ”type” → byt namn för att slippa reserved-word-strul
          type: string
          description: Träningstyp (Styrka, Cardio …)
        details:
          type: string
          description: Exempel – ”Marklyft 100 kg × 3”
