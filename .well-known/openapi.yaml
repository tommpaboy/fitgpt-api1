openapi: 3.1.0

info:
  title: FitGPT API
  version: "1.7.0"
  description: |
    API som kombinerar Fitbit-data (inkl. sömn & HRV) med manuellt loggade
    måltider och träningspass. GPT hämtar som standard de senaste 3 dagarna
    utan att fråga användaren.

servers:
  - url: https://fitgpt-2364.onrender.com

paths:
  /daily-summary:
    get:
      summary: Samlad dagsdata (Fitbit + Firestore)
      operationId: getDailySummary
      parameters:
        - in: query
          name: target_date
          description: YYYY-MM-DD (default = idag, svensk tid)
          schema: {type: string, format: date}
        - in: query
          name: fresh
          description: true → hoppa cache (hämtar alltid färsk Fitbit-data)
          schema: {type: boolean}
      responses:
        "200":
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}
      x-openai-isConsequential: false

  /data/extended:
    get:
      summary: Fitbit-detaljer (1–N dagar)
      operationId: getExtended
      parameters:
        - in: query
          name: days
          schema: {type: integer, minimum: 1, default: 1}
        - in: query
          name: target_date
          description: YYYY-MM-DD (överskriver days)
          schema: {type: string, format: date}
      responses:
        "200":
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}
      x-openai-isConsequential: false

  /data/extended/full:
    get:
      summary: Fitbit + Firestore för flera dagar
      operationId: getExtendedFull
      parameters:
        - in: query
          name: days
          schema: {type: integer, minimum: 1, default: 3}
        - in: query
          name: fresh
          description: true → hämtar färsk data istället för cache
          schema: {type: boolean}
      responses:
        "200":
          description: OK
          content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}
      x-openai-isConsequential: false

  /data/steps:
    get:
      summary: Steg för datum
      operationId: getSteps
      parameters:
        - in: query
          name: date
          required: true
          schema: {type: string, format: date}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: false

  /data/sleep:
    get:
      summary: Sömn för datum
      operationId: getSleep
      parameters:
        - in: query
          name: date
          required: true
          schema: {type: string, format: date}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: false

  /data/heart:
    get:
      summary: Puls för datum
      operationId: getHeart
      parameters:
        - in: query
          name: date
          required: true
          schema: {type: string, format: date}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: false

  /data/calories:
    get:
      summary: Förbrända kalorier för datum
      operationId: getCalories
      parameters:
        - in: query
          name: date
          required: true
          schema: {type: string, format: date}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: false

  /log/meal:
    post:
      summary: Logga måltid
      operationId: postMeal
      requestBody:
        required: true
        content: {application/json: {schema: {$ref: '#/components/schemas/MealLog'}}}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: true
    get:
      summary: Hämta måltider för datum
      operationId: getMeals
      parameters:
        - in: query
          name: date
          required: true
          schema: {type: string, format: date}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: {type: array, items: {$ref: '#/components/schemas/MealLog'}}
      x-openai-isConsequential: false

  /log/meal/{id}:
    put:
      summary: Uppdatera måltid
      operationId: putMeal
      parameters: [{in: path, name: id, required: true, schema: {type: string}}]
      requestBody:
        required: true
        content: {application/json: {schema: {$ref: '#/components/schemas/MealLog'}}}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: true
    delete:
      summary: Ta bort måltid
      operationId: deleteMeal
      parameters: [{in: path, name: id, required: true, schema: {type: string}}]
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: true

  /log/workout:
    post:
      summary: Logga träningspass
      operationId: postWorkout
      requestBody:
        required: true
        content: {application/json: {schema: {$ref: '#/components/schemas/WorkoutLog'}}}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: true
    get:
      summary: Hämta pass för datum
      operationId: getWorkouts
      parameters: [{in: query, name: date, required: true, schema: {type: string, format: date}}]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: {type: array, items: {$ref: '#/components/schemas/WorkoutLog'}}
      x-openai-isConsequential: false

  /log/workout/{id}:
    put:
      summary: Uppdatera träningspass
      operationId: putWorkout
      parameters: [{in: path, name: id, required: true, schema: {type: string}}]
      requestBody:
        required: true
        content: {application/json: {schema: {$ref: '#/components/schemas/WorkoutLog'}}}
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: true
    delete:
      summary: Ta bort träningspass
      operationId: deleteWorkout
      parameters: [{in: path, name: id, required: true, schema: {type: string}}]
      responses:
        "200": {description: OK, content: {application/json: {schema: {$ref: '#/components/schemas/GenericObject'}}}}
      x-openai-isConsequential: true

components:
  schemas:
    GenericObject:
      type: object
      additionalProperties: true
      properties:
        date:   {type: string, format: date}
        kcal_in:{type: integer, description: Kalorier in (manuella måltider)}
        kcal_out:{type: integer, nullable: true, description: Kalorier ut (null om Fitbit saknar exakt värde)}
        is_estimate:{type: boolean, description: true om kcal_out är uppskattat}
        sleep:
          type: object
          nullable: true
          properties:
            minutes:    {type: integer, description: Sömn­tid (min)}
            efficiency: {type: integer, description: Fitbit sleep-score %}
        hrv:
          type: integer
          nullable: true
          description: HRV (rMSSD ms)
    MealLog:
      type: object
      required: [date, meal, items]
      properties:
        date:   {type: string, format: date}
        meal:   {type: string}
        items:  {type: string}
        estimated_calories: {type: integer}
        protein_g: {type: integer}
        carbs_g:   {type: integer}
        fat_g:     {type: integer}
    WorkoutLog:
      type: object
      required: [date, workout_type, details]
      properties:
        date:        {type: string, format: date}
        workout_type:{type: string}
        details:     {type: string}
        start_time:  {type: string, format: date-time, description: ISO (YYYY-MM-DDTHH:MM:SS)}
